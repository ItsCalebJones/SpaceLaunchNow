buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
        jcenter()
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.24.0'
        classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:0.8.1'
    }
}

plugins {
    id 'com.palantir.git-version' version '0.9.1'
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'realm-android'
apply plugin: 'com.getkeepsafe.dexcount'

repositories {
    jcenter()
    maven { url 'https://maven.fabric.io/public' }
    google()
}

def versionMajor = 1
def versionMinor = 8
def versionPatch = 1
def appVersionCode = 0
def appVersionName = ""
def details = versionDetails()
def versionPropsFile = file('version.properties')

android {

    signingConfigs {
        config {
            keyAlias "${alias}"
            keyPassword "${password}"
            storeFile file('/Users/cjones/Google Drive/Caleb/Development/BlogSite.keystore')
            storePassword "${password}"
        }
    }
    flavorDimensions "release"
    compileSdkVersion 27
    buildToolsVersion '26.0.2'
    defaultConfig {

//        splits {
//            abi {
//                enable true
//                reset()
//                include 'x86_64', 'x86', 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'mips'
//                universalApk false
//            }
//        }

        applicationId "me.calebjones.spacelaunchnow"
        manifestPlaceholders = [appNameLabel                   : "@string/application_name",
                                manifestApplicationId          : "${applicationId}",
                                onesignal_app_id               : "${app_id}",
                                onesignal_google_project_number: "${google_project_number}"]
        if (versionPropsFile.canRead()) {
            Properties versionProps = new Properties()
            versionProps.load(new FileInputStream(versionPropsFile))
            List<String> runTasks = gradle.startParameter.getTaskNames()
            def versionBuild = versionProps['VERSION_CODE'].toInteger()
            for (String item : runTasks) {
                if (item.contains("assemble") && item.contains("Release")) {
                    versionBuild = versionBuild + 1
                    versionProps['VERSION_CODE'] = versionBuild.toString()
                    versionProps.store(versionPropsFile.newWriter(), null)
                }
            }

            minSdkVersion 16
            targetSdkVersion 26
            versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
            versionName "${versionMajor}.${versionMinor}.${versionPatch}"
            signingConfig signingConfigs.config
            resConfigs "en"
            multiDexEnabled true
        } else {
            throw new GradleException("Could not read version.properties!")
        }

    }
    buildTypes {
        debug {
            ext.alwaysUpdateBuildId = false
            applicationIdSuffix '.debug'
            manifestPlaceholders = [appNameLabel         : "SLN - Debug",
                                    manifestApplicationId: "me.calebjones.spacelaunchnow.ui.debug"]
            debuggable true
            renderscriptOptimLevel 3
            versionNameSuffix "-debug-${defaultConfig.versionCode}"
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules-debug.pro'

        }
        release {
            zipAlignEnabled true
            minifyEnabled true
            shrinkResources true
            versionNameSuffix "-b${defaultConfig.versionCode}"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "SpaceLaunchNow-release-${variant.versionName}-${details.gitHash}.apk"
                }
            }
        }

        validation.initWith(debug)
        validation {
            debuggable false
            renderscriptOptimLevel 3
            applicationIdSuffix ".test"
            versionNameSuffix "-test"
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules-debug.pro'
            testProguardFile('proguard-rules-test.pro')
        }
    }
    lintOptions {
        abortOnError false
        checkReleaseBuilds false
    }
    productFlavors {
        debugTesting {
            minSdkVersion 21
            multiDexEnabled false
            dimension "release"
        }
        prod {
            // The actual minSdkVersion for the application.
            minSdkVersion 16
            multiDexEnabled false
            dimension "release"
        }
        beta {
            minSdkVersion 16
            multiDexEnabled false
            applicationIdSuffix ".beta"
            versionNameSuffix "-beta"
        }
    }
}

//// map for the version code that gives each ABI a value. make sure to list all ABIs mentioned in splits block, an keep the order.
//ext.versionCodes = ['armeabi': 3, 'armeabi-v7a': 4, 'arm64-v8a': 5, mips: 6, 'x86': 7, 'x86_64': 8]
//import com.android.build.OutputFile
//
//// For each APK output variant, override versionCode with a combination of
//// ABI APK value * 1000 + defaultConfig.versionCode
//android.applicationVariants.all { variant ->
//    // assign different version code for each output
//    variant.outputs.each { output ->
//        output.versionCodeOverride =
//                project.ext.versionCodes.get(output.getFilter(OutputFile.ABI)) * 1000 + android.defaultConfig.versionCode
//    }
//}

dependencies {
    wearApp project(':wear')
    implementation project(path: ':data')



    // Android Official Libraries
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.android.support:multidex:1.0.2'
    implementation "com.android.support:customtabs:$rootProject.supportLibraryVersion"
    implementation "com.android.support:cardview-v7:$rootProject.supportLibraryVersion"
    implementation "com.android.support:palette-v7:$rootProject.supportLibraryVersion"
    implementation "com.android.support:support-v4:$rootProject.supportLibraryVersion"
    implementation "com.android.support:design:$rootProject.supportLibraryVersion"
    implementation "com.android.support:preference-v7:$rootProject.supportLibraryVersion"
    implementation "com.android.support:animated-vector-drawable:$rootProject.supportLibraryVersion"
    implementation "com.android.support:support-v13:$rootProject.supportLibraryVersion"
    implementation "com.android.support:percent:$rootProject.supportLibraryVersion"
    implementation "com.google.android.gms:play-services-location:$rootProject.playServicesVersion"
    implementation "com.google.android.gms:play-services-wearable:$rootProject.playServicesVersion"
    implementation "com.google.android.gms:play-services-gcm:$rootProject.playServicesVersion"
    implementation "com.google.android.gms:play-services-ads:$rootProject.playServicesVersion"

    // Communication
    implementation 'com.onesignal:OneSignal:3.6.5@aar'

    // Architecture and Tools
    implementation 'com.jonathanfinerty.once:once:1.2.2'
    implementation 'org.greenrobot:eventbus:3.1.1'
    implementation('com.crashlytics.sdk.android:crashlytics:2.7.1@aar') {
        transitive = true
    }
    implementation 'com.jakewharton.timber:timber:4.6.0'
    implementation 'com.karumi:dexter:4.2.0'
    implementation 'com.anjlab.android.iab.v3:library:1.0.44'
    implementation 'com.evernote:android-job:1.2.1'
    implementation 'blue.aodev:material-values:1.1.1'


    // Views and Animations
    implementation 'com.afollestad.material-dialogs:core:0.9.4.3'
    implementation 'com.afollestad.material-dialogs:commons:0.9.3.0'
    implementation 'com.github.chrisbanes:PhotoView:2.0.0'
    implementation 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
    implementation 'com.github.jrvansuita:MaterialAbout:0.1.9'
    implementation 'com.github.mukeshsolanki:MarkdownView-Android:1.0.4'
    implementation 'com.jaredrummler:colorpicker:1.0.1'
    implementation 'com.andkulikov:transitionseverywhere:1.7.7'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.3.1'
    implementation 'com.github.bumptech.glide:glide:4.3.1'
    implementation 'com.github.clans:fab:1.6.4'
    implementation 'com.github.amlcurran.showcaseview:library:5.4.3'
    implementation 'com.codemybrainsout.onboarding:onboarder:1.0.4'
    implementation 'de.hdodenhof:circleimageview:2.2.0'
    implementation 'com.borax12.materialdaterangepicker:library:1.9'
    implementation 'net.mediavrog:integrated-rating-request:1.1.2'
    implementation 'com.simplecityapps:recyclerview-fastscroll:1.0.16'
    implementation 'jp.wasabeef:glide-transformations:3.0.1'
    // If you want to use the GPU Filters
    implementation 'jp.co.cyberagent.android.gpuimage:gpuimage-library:1.4.1'
    implementation("com.mikepenz:materialdrawer:6.0.2@aar") {
        transitive = true
    }



    // HTTP Related libraries
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.github.renaudcerrato:static-maps-api:1.0.4'
    implementation 'com.google.code.gson:gson:2.8.2'
    implementation 'com.squareup.okhttp3:okhttp:3.9.1'

    implementation 'android.zetterstrom.com.forecast:forecast:1.2.0'
    implementation 'it.macisamuele:calendarprovider-lib:0.0.1'

    // DO NOT UPDATE - v5.0.+ not working well.
    implementation 'com.github.michael-rapp:android-preference-activity:4.2.11'

    // Iconography
    implementation 'com.mikepenz:iconics-core:3.0.0@aar'
    implementation 'com.mikepenz:google-material-typeface:3.0.1.1.original@aar'
    implementation 'com.mikepenz:community-material-typeface:2.0.46.1@aar'
    implementation 'com.github.pwittchen:weathericonview:1.1.0'
    implementation 'com.mikepenz:fontawesome-typeface:4.7.0.0@aar'
}
