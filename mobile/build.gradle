import org.moallemi.gradle.internal.VersionCodeType
import com.android.build.OutputFile

buildscript {
    repositories {
        google()
        maven { url 'https://maven.fabric.io/public' }
        maven { url "https://jitpack.io" }
        jcenter()
        maven {
            name 'Sonatype SNAPSHOTs';
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.25.4'
        classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:0.8.2'
    }
}

plugins {
    id 'com.palantir.git-version' version '0.9.1'
}

apply plugin: 'org.moallemi.advanced-build-version'
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'realm-android'
apply plugin: 'com.getkeepsafe.dexcount'

advancedVersioning {
    nameOptions {
        versionMajor app.versionMajor
        versionMinor app.versionMinor
        versionPatch app.versionPatch
        versionBuild versionCode
    }
    codeOptions {
        versionCodeType VersionCodeType.AUTO_INCREMENT_ONE_STEP
        dependsOnTasks 'release'

    }

    outputOptions {
        renameOutput true
        nameFormat '${projectName}-${appName}-${buildType}-${versionName}'
    }
}

//ext.abiCodes = ['armeabi-v7a':1, mips:2, x86:3, x86_64:4, armeabi:5]
//
//// For each APK output variant, override versionCode with a combination of
//// ext.abiCodes * 1000 + variant.versionCode. In this example, variant.versionCode
//// is equal to defaultConfig.versionCode. If you configure product flavors that
//// define their own versionCode, variant.versionCode uses that value instead.
//android.applicationVariants.all { variant ->
//
//    // Assigns a different version code for each output APK
//    // other than the universal APK.
//    variant.outputs.each { output ->
//
//        // Stores the value of ext.abiCodes that is associated with the ABI for this variant.
//        def baseAbiVersionCode =
//                // Determines the ABI for this variant and returns the mapped value.
//                project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))
//
//        // Because abiCodes.get() returns null for ABIs that are not mapped by ext.abiCodes,
//        // the following code does not override the version code for universal APKs.
//        // However, because we want universal APKs to have the lowest version code,
//        // this outcome is desirable.
//        if (baseAbiVersionCode != null) {
//
//            // Assigns the new version code to versionCodeOverride, which changes the version code
//            // for only the output APK, not for the variant itself. Skipping this step simply
//            // causes Gradle to use the value of variant.versionCode for the APK.
//            output.versionCodeOverride =
//                    baseAbiVersionCode * 1000 + variant.versionCode
//        }
//    }
//}


repositories {
    google()
    jcenter()
    maven { url 'https://maven.fabric.io/public' }
}

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

if (keystorePropertiesFile.canRead()) {
// Load your keystore.properties file into the keystoreProperties object.
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
} else {
    throw new GradleException("Could not read keystore.properties!")
}


android {
    signingConfigs {
        releaseConfig {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    def appVersionCode = app.versionMajor * 10000 + app.versionMinor * 1000 + app.versionPatch * 100 + advancedVersioning.versionCode
    flavorDimensions "release"
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion '28.0.3'
    defaultConfig {

        applicationId "me.calebjones.spacelaunchnow"
        manifestPlaceholders = [appNameLabel         : "@string/app_name",
                                manifestApplicationId: "${applicationId}",]

        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode appVersionCode
        versionName advancedVersioning.versionName
        resConfigs "en", "fr", "de", "es", "es-rES", "it", "ru"
        multiDexEnabled true
        wearAppUnbundled true

    }
    buildTypes {
        debug {
            ext.alwaysUpdateBuildId = false
            applicationIdSuffix '.debug'
            manifestPlaceholders = [appNameLabel         : "SLN - Debug",
                                    manifestApplicationId: "me.calebjones.spacelaunchnow.ui.debug"]
            debuggable true
            renderscriptOptimLevel 3
            versionNameSuffix "-debug-b${appVersionCode}"
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules-debug.pro'
        }
        release {
//        splits {
//            abi {
//                enable true
//                reset()
//                include 'x86_64', 'x86', 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'mips'
//                universalApk true
//            }
//        }
            zipAlignEnabled true
            minifyEnabled true
            shrinkResources true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.releaseConfig
        }
    }
    lintOptions {
        abortOnError false
        checkReleaseBuilds false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

//// map for the version code that gives each ABI a value. make sure to list all ABIs mentioned in splits block, an keep the order.
//ext.versionCodes = ['armeabi': 3, 'armeabi-v7a': 4, 'arm64-v8a': 5, mips: 6, 'x86': 7, 'x86_64': 8]
//import com.android.build.OutputFile
//
//// For each APK output variant, override versionCode with a combination of
//// ABI APK value * 1000 + defaultConfig.versionCode
//android.applicationVariants.all { variant ->
//    // assign different version code for each output
//    variant.outputs.each { output ->
//        output.versionCodeOverride =
//                project.ext.versionCodes.get(output.getFilter(OutputFile.ABI)) * 1000 + android.defaultConfig.versionCode
//    }
//}

dependencies {
    implementation project(path: ':data')
    implementation project(path: ':common')
    implementation project(':news')
    implementation project(':iss')
    implementation project(':events')
    implementation files('libs/YouTubeAndroidPlayerApi.jar')
    implementation 'com.android.support:multidex:1.0.3'

    // Android Official Libraries
    implementation("androidx.arch.core:core-runtime:2.0.1-alpha01")
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.browser:browser:1.0.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.palette:palette:1.0.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.0.0'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.preference:preference:1.0.0'
    implementation 'androidx.vectordrawable:vectordrawable-animated:1.0.0'
    implementation 'androidx.percentlayout:percentlayout:1.0.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation "com.google.firebase:firebase-core:16.0.5"
    implementation "com.google.android.gms:play-services-wearable:16.0.1"
    implementation "com.google.android.gms:play-services-ads:16.0.0"

    implementation 'com.pixplicity.easyprefs:library:1.9.0'

    // Architecture and Tools
    implementation 'com.jonathanfinerty.once:once:1.2.2'
    implementation 'org.greenrobot:eventbus:3.1.1'
    implementation 'com.crashlytics.sdk.android:crashlytics:2.9.5'

    implementation 'com.karumi:dexter:4.2.0'
    implementation 'cz.kinst.jakub:android-stateful-layout-simple:2.0.7'

    // Billing
    implementation 'com.anjlab.android.iab.v3:library:1.0.44'

    implementation 'com.evernote:android-job:1.2.6'


    // Views and Animations
    implementation 'com.afollestad.material-dialogs:core:0.9.4.3'
    implementation 'com.afollestad.material-dialogs:commons:0.9.3.0'
    implementation 'com.github.chrisbanes:PhotoView:2.0.0'

    implementation 'com.github.ItsCalebJones:GDPRDialog:54231db'

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.andkulikov:transitionseverywhere:1.8.0'

    implementation 'com.github.jrvansuita:MaterialAbout:0.2.3'
    implementation 'com.github.mukeshsolanki:MarkdownView-Android:1.0.4'
    implementation 'com.jaredrummler:colorpicker:1.0.1'
    implementation 'com.andkulikov:transitionseverywhere:1.8.0'
    implementation 'com.github.bumptech.glide:glide:4.8.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.8.0'
    implementation 'com.github.florent37:glidepalette:2.1.2'
    implementation 'com.codemybrainsout.onboarding:onboarder:1.0.4'
    implementation 'de.hdodenhof:circleimageview:2.2.0'
    implementation 'com.borax12.materialdaterangepicker:library:1.9'
    implementation 'com.simplecityapps:recyclerview-fastscroll:1.0.18'
    implementation 'jp.wasabeef:glide-transformations:3.0.1'
    implementation 'net.cachapa.expandablelayout:expandablelayout:2.9.2'
    implementation 'at.blogc:expandabletextview:1.0.5'

    // If you want to use the GPU Filters
    implementation 'jp.co.cyberagent.android.gpuimage:gpuimage-library:1.4.1'
    implementation "com.mikepenz:materialdrawer:6.1.0"


    // HTTP Related libraries
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.github.renaudcerrato:static-maps-api:1.0.4'
    implementation 'com.google.code.gson:gson:2.8.4'
    implementation 'com.squareup.okhttp3:okhttp:3.10.0'
    implementation 'android.zetterstrom.com.forecast:forecast:1.2.0'
    implementation 'it.macisamuele:calendarprovider-lib:0.0.1'

    // DO NOT UPDATE - v5.0.+ not working well.
    implementation 'com.github.michael-rapp:android-preference-activity:4.2.11'

    // Iconography
    implementation 'com.mikepenz:iconics-core:3.1.0@aar'
    implementation 'com.mikepenz:google-material-typeface:3.0.1.2.original@aar'
    implementation 'com.mikepenz:community-material-typeface:2.0.46.1@aar'
    implementation 'com.github.pwittchen:weathericonview:1.1.0'
    implementation 'com.mikepenz:fontawesome-typeface:5.0.13.0@aar'

    implementation "io.reactivex.rxjava2:rxjava:2.1.15"
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
    //Rich Links
    implementation 'com.github.nekocode:Badge:2.0'

    //Twitter
    implementation 'com.twitter.sdk.android:twitter-core:3.3.0'
    implementation 'com.twitter.sdk.android:tweet-ui:3.3.0'

    // Firebase Messaging
    implementation "com.google.firebase:firebase-messaging:17.3.4"

    implementation 'com.jakewharton.timber:timber:4.7.1'

    implementation 'com.jakewharton:butterknife:9.0.0-rc1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:9.0.0-rc1'

    implementation 'com.ashokvarma.android:bottom-navigation-bar:2.1.0'
}

apply plugin: 'com.google.gms.google-services'
